def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'maven'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // applicationId "com.buxiaohui.flutterapp"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

//uploadArchives {
//    repositories.mavenDeployer{
//        name='mavenCentralReleaseDeployer'
//        repository(url:"http://127.0.0.1:8081/nexus/content/repositories/com.baidu.bnavi/")
//                {
//                    authentication(userName:"admin",password:"admin123")
//                }
//        pom.version  = "1.0.1"
//        pom.artifactId = "flutter_lib"
//        pom.groupId = "com.baidu.bnavi"
//        pom.name = "flutter_aar"
//        pom.packaging = "aar"
//    }
//}

task flutterPlugin << {
    println "工程目录 = ${project.rootDir}/"
    println "编译成功的位置 = ${this.buildDir}/"

    def projectName = this.buildDir.getPath()
    projectName = projectName.substring(0, projectName.length() - "app/".length())
    println "---1---projectName = $projectName"
    def rDir = new File("${this.rootDir}/FlutterPlugin/")
    def bDir = new File(projectName)
    println "---2---projectName = $projectName"
    if (!rDir.exists()) {
        rDir.mkdirs()
    } else {
        rDir.deleteDir()
    }
    println "rDir = $rDir"
    bDir.eachDir {File dir ->
        def subDir = dir.getPath()
        def flutterJarDirName = subDir.replace("${projectName}/", "")
        def flutterJarDir = null
        println "dir = $dir"
        println "flutterJarDirName = $flutterJarDirName"
        println "subDir = $subDir"

        if (subDir.contains("build/app")) {// 如果是app目录的话 拷贝编译后生成的flutter目录
            println "---111111111111111"
            flutterJarDir = new File("${subDir}/intermediates/assets/")
        } else {
            println "---22222222222222"
            flutterJarDir = new File("${subDir}/intermediates/intermediate-jars/")
        }
        println "flutterJarDir = $flutterJarDir"
        project.copy {
            from flutterJarDir
            into "${rDir}/${flutterJarDirName}"
        }
    }
}


